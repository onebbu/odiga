{"ast":null,"code":"var _jsxFileName = \"D:\\\\coding\\\\\\uBCF8\\uD504\\uB85C\\uC81D\\uD2B8\\\\odiga\\\\odiga_frontend\\\\src\\\\pages\\\\traveldetailpage\\\\Test.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  // 입력 필드의 상태를 관리하기 위한 useState 훅\n  const [inputText, setInputText] = useState(\"\");\n\n  // 사용자가 입력 필드를 변경할 때마다 호출되는 함수\n  const handleInputChange = event => {\n    setInputText(event.target.value);\n  };\n\n  // 사용자가 데이터를 전송하려 할 때 호출되는 함수\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/analyzeEntities', {\n        method: 'POST',\n        // POST 요청\n        headers: {\n          'Content-Type': 'text/plain' // 텍스트 형태의 데이터를 전송한다고 알림\n        },\n        body: inputText // JSON으로 변환하는 대신 직접 텍스트를 전송\n      });\n      const data = await response.text(); // 서버로부터 받은 응답을 텍스트로 변환\n      console.log(data); // 결과를 콘솔에 출력\n    } catch (error) {\n      console.error('Error:', error); // 오류 발생 시 콘솔에 오류 메시지 출력\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputText // 입력 필드의 값으로 inputText 상태 사용\n        ,\n        onChange: handleInputChange // 입력 필드가 변경될 때마다 handleInputChange 함수 호출\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"FupQuLxG7pBPrulNgTXkcZMsQO8=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Test","_s","inputText","setInputText","handleInputChange","event","target","value","handleSubmit","response","fetch","method","headers","body","data","text","console","log","error","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/coding/본프로젝트/odiga/odiga_frontend/src/pages/traveldetailpage/Test.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Test() {\r\n    // 입력 필드의 상태를 관리하기 위한 useState 훅\r\n    const [inputText, setInputText] = useState(\"\");\r\n\r\n    // 사용자가 입력 필드를 변경할 때마다 호출되는 함수\r\n    const handleInputChange = (event) => {\r\n        setInputText(event.target.value);\r\n    };\r\n\r\n    // 사용자가 데이터를 전송하려 할 때 호출되는 함수\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/analyzeEntities', {\r\n                method: 'POST', // POST 요청\r\n                headers: {\r\n                    'Content-Type': 'text/plain', // 텍스트 형태의 데이터를 전송한다고 알림\r\n                },\r\n                body: inputText, // JSON으로 변환하는 대신 직접 텍스트를 전송\r\n            });\r\n            const data = await response.text(); // 서버로부터 받은 응답을 텍스트로 변환\r\n            console.log(data); // 결과를 콘솔에 출력\r\n        } catch (error) {\r\n            console.error('Error:', error); // 오류 발생 시 콘솔에 오류 메시지 출력\r\n        }\r\n    };\r\n\r\n    return (\r\n        <body>\r\n            <div>\r\n                <input \r\n                    type='text' \r\n                    value={inputText} // 입력 필드의 값으로 inputText 상태 사용\r\n                    onChange={handleInputChange} // 입력 필드가 변경될 때마다 handleInputChange 함수 호출\r\n                />\r\n                <button onClick={handleSubmit}>Send</button> {/* 클릭 시 handleSubmit 함수 호출 */}\r\n            </div>\r\n        </body>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMO,iBAAiB,GAAIC,KAAK,IAAK;IACjCF,YAAY,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QAClEC,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UACL,cAAc,EAAE,YAAY,CAAE;QAClC,CAAC;QACDC,IAAI,EAAEX,SAAS,CAAE;MACrB,CAAC,CAAC;MACF,MAAMY,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC,CAAC;IACpC;EACJ,CAAC;EAED,oBACInB,OAAA;IAAAoB,QAAA,eACIpB,OAAA;MAAAoB,QAAA,gBACIpB,OAAA;QACIqB,IAAI,EAAC,MAAM;QACXb,KAAK,EAAEL,SAAU,CAAC;QAAA;QAClBmB,QAAQ,EAAEjB,iBAAkB,CAAC;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACF1B,OAAA;QAAQ2B,OAAO,EAAElB,YAAa;QAAAW,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf;AAACxB,EAAA,CAtCQD,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAwCb,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}